---
---

<form class="space-y-6" id="contact-form">
  <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
    <div class="form-group">
      <label for="name" class="form-label">Full Name *</label>
      <input 
        type="text" 
        id="name" 
        name="name" 
        class="form-input" 
        required 
      />
    </div>
    
    <div class="form-group">
      <label for="email" class="form-label">Email Address *</label>
      <input 
        type="email" 
        id="email" 
        name="email" 
        class="form-input" 
        required 
      />
    </div>
  </div>
  
  <div class="form-group">
    <label for="phone" class="form-label">Phone Number (Optional)</label>
    <input 
      type="tel" 
      id="phone" 
      name="phone" 
      class="form-input" 
    />
  </div>
  
  <div class="form-group">
    <label class="form-label">Preferred Roast Level *</label>
    <div class="grid grid-cols-1 sm:grid-cols-3 gap-4 mt-2">
      <div class="flex items-center">
        <input 
          type="radio" 
          id="light-roast" 
          name="roast_level" 
          value="light" 
          class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300" 
          required
        />
        <label for="light-roast" class="ml-2 block text-primary-700">Light</label>
      </div>
      
      <div class="flex items-center">
        <input 
          type="radio" 
          id="medium-roast" 
          name="roast_level" 
          value="medium"
          class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300"
        />
        <label for="medium-roast" class="ml-2 block text-primary-700">Medium</label>
      </div>
      
      <div class="flex items-center">
        <input 
          type="radio" 
          id="dark-roast" 
          name="roast_level" 
          value="dark"
          class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300"
        />
        <label for="dark-roast" class="ml-2 block text-primary-700">Dark</label>
      </div>
    </div>
  </div>
  
  <div class="form-group">
    <label class="form-label">Preferred Designations (Select all that apply)</label>
    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mt-2">
      <div class="flex items-center">
        <input 
          type="checkbox" 
          id="organic" 
          name="designations" 
          value="organic"
          class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
        />
        <label for="organic" class="ml-2 block text-primary-700">Organic</label>
      </div>
      
      <div class="flex items-center">
        <input 
          type="checkbox" 
          id="fair-trade" 
          name="designations" 
          value="fair-trade"
          class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
        />
        <label for="fair-trade" class="ml-2 block text-primary-700">Fair Trade</label>
      </div>
      
      <div class="flex items-center">
        <input 
          type="checkbox" 
          id="decaf" 
          name="designations" 
          value="decaf"
          class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
        />
        <label for="decaf" class="ml-2 block text-primary-700">Decaf</label>
      </div>
      
      <div class="flex items-center">
        <input 
          type="checkbox" 
          id="bird-friendly" 
          name="designations" 
          value="bird-friendly"
          class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
        />
        <label for="bird-friendly" class="ml-2 block text-primary-700">Bird-Friendly</label>
      </div>
      
      <div class="flex items-center">
        <input 
          type="checkbox" 
          id="shade-grown" 
          name="designations" 
          value="shade-grown"
          class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
        />
        <label for="shade-grown" class="ml-2 block text-primary-700">Shade Grown</label>
      </div>
      
      <div class="flex items-center">
        <input 
          type="checkbox" 
          id="direct-trade" 
          name="designations" 
          value="direct-trade"
          class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
        />
        <label for="direct-trade" class="ml-2 block text-primary-700">Direct Trade</label>
      </div>
    </div>
  </div>
  
  <div class="form-group">
    <label for="message" class="form-label">Message *</label>
    <textarea 
      id="message" 
      name="message" 
      rows="5" 
      class="form-input" 
      required
    ></textarea>
  </div>
  
  <div class="flex items-start">
    <div class="flex items-center h-5">
      <input
        id="newsletter"
        name="newsletter"
        type="checkbox"
        class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
      />
    </div>
    <div class="ml-3 text-sm">
      <label for="newsletter" class="text-primary-700">Subscribe to our newsletter for updates and special offers</label>
    </div>
  </div>
  
  <div class="flex justify-end">
    <button type="submit" class="btn-primary" id="submit-btn">
      <span id="submit-text">Send Message</span>
      <div id="submit-loading" class="hidden flex items-center">
        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Sending...
      </div>
    </button>
  </div>
  
  <div id="form-success" class="hidden p-4 bg-success-100 text-success-700 rounded-md">
    <div class="flex items-center">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
      </svg>
      Thank you for contacting us! We'll get back to you shortly.
    </div>
  </div>
  
  <div id="form-error" class="hidden p-4 bg-error-100 text-error-700 rounded-md">
    <div class="flex items-center">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
      <span id="error-message">There was an error submitting your message. Please try again.</span>
    </div>
  </div>
</form>

<script type="module">
  import { supabase } from '../lib/supabaseClient.js';

  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('contact-form');
    const submitBtn = document.getElementById('submit-btn');
    const submitText = document.getElementById('submit-text');
    const submitLoading = document.getElementById('submit-loading');
    const successMessage = document.getElementById('form-success');
    const errorMessage = document.getElementById('form-error');
    const errorMessageText = document.getElementById('error-message');
    
    function showLoading() {
      submitBtn.disabled = true;
      submitText.classList.add('hidden');
      submitLoading.classList.remove('hidden');
    }
    
    function hideLoading() {
      submitBtn.disabled = false;
      submitText.classList.remove('hidden');
      submitLoading.classList.add('hidden');
    }
    
    function showSuccess() {
      successMessage.classList.remove('hidden');
      errorMessage.classList.add('hidden');
      
      // Scroll to the success message
      successMessage.scrollIntoView({ behavior: 'smooth' });
      
      // Hide the success message after 10 seconds
      setTimeout(() => {
        successMessage.classList.add('hidden');
      }, 10000);
    }
    
    function showError(message = 'There was an error submitting your message. Please try again.') {
      errorMessageText.textContent = message;
      errorMessage.classList.remove('hidden');
      successMessage.classList.add('hidden');
      
      // Scroll to the error message
      errorMessage.scrollIntoView({ behavior: 'smooth' });
      
      // Hide the error message after 10 seconds
      setTimeout(() => {
        errorMessage.classList.add('hidden');
      }, 10000);
    }
    
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      // Hide any existing messages
      successMessage.classList.add('hidden');
      errorMessage.classList.add('hidden');
      
      showLoading();
      
      try {
        // Collect form data
        const formData = new FormData(form);
        
        // Get all selected designations
        const designations = [];
        const designationInputs = form.querySelectorAll('input[name="designations"]:checked');
        designationInputs.forEach(input => {
          designations.push(input.value);
        });
        
        // Prepare the data object
        const contactData = {
          name: formData.get('name'),
          email: formData.get('email'),
          phone: formData.get('phone') || '',
          roast_level: formData.get('roast_level'),
          designations: designations,
          message: formData.get('message'),
          newsletter: formData.get('newsletter') === 'on'
        };
        
        // Validate required fields
        if (!contactData.name || !contactData.email || !contactData.roast_level || !contactData.message) {
          throw new Error('Please fill in all required fields.');
        }
        
        // Send the email via Supabase edge function
        const response = await fetch(`${import.meta.env.PUBLIC_SUPABASE_URL}/functions/v1/send-contact-email`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${import.meta.env.PUBLIC_SUPABASE_ANON_KEY}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(contactData),
        });
        
        const result = await response.json();
        
        if (!response.ok) {
          throw new Error(result.error || result.message || 'Failed to send message');
        }
        
        // Success!
        showSuccess();
        form.reset();
        
      } catch (error) {
        console.error('Contact form error:', error);
        showError(error.message);
      } finally {
        hideLoading();
      }
    });
  });
</script>