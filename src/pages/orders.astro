---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Order History" description="View all your orders and their details">
  <div id="auth-loading" class="min-h-screen bg-primary-50 flex items-center justify-center">
    <div class="text-center">
      <div class="coffee-loader mb-4"></div>
      <p class="text-primary-600">Loading your orders...</p>
    </div>
  </div>

  <div id="orders-content" class="hidden">
    <section class="bg-primary-900 text-white py-16 md:py-24">
      <div class="container-custom">
        <div class="max-w-3xl mx-auto text-center">
          <h1 class="mb-4 animate-fade-in">Order History</h1>
          <p class="text-lg text-primary-100 animate-slide-up" style="animation-delay: 0.2s;">
            View all your orders and track their status
          </p>
        </div>
      </div>
    </section>

    <section class="section bg-white">
      <div class="container-custom">
        <div class="max-w-4xl mx-auto">
          <!-- Breadcrumb -->
          <nav class="mb-8">
            <ol class="flex items-center space-x-2 text-sm text-primary-600">
              <li><a href="/" class="hover:text-primary-800">Home</a></li>
              <li><span class="mx-2">/</span></li>
              <li><a href="/dashboard" class="hover:text-primary-800">Dashboard</a></li>
              <li><span class="mx-2">/</span></li>
              <li class="text-primary-900">Orders</li>
            </ol>
          </nav>

          <!-- Filter and Sort -->
          <div class="card p-6 mb-8">
            <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
              <div class="flex items-center space-x-4">
                <select id="status-filter" class="form-input max-w-xs">
                  <option value="">All Statuses</option>
                  <option value="completed">Completed</option>
                  <option value="pending">Pending</option>
                  <option value="canceled">Canceled</option>
                </select>
                <select id="date-filter" class="form-input max-w-xs">
                  <option value="">All Time</option>
                  <option value="30">Last 30 Days</option>
                  <option value="90">Last 3 Months</option>
                  <option value="365">Last Year</option>
                </select>
              </div>
              <div class="text-sm text-primary-600">
                <span id="order-count">Loading...</span> orders found
              </div>
            </div>
          </div>

          <!-- Orders List -->
          <div id="orders-list">
            <div class="text-center py-16">
              <div class="coffee-loader mb-4"></div>
              <p class="text-primary-600">Loading your orders...</p>
            </div>
          </div>

          <!-- Pagination -->
          <div id="pagination" class="hidden mt-8 flex justify-center">
            <nav class="flex items-center space-x-2">
              <button id="prev-page" class="btn-outline py-2 px-4 text-sm" disabled>
                Previous
              </button>
              <span id="page-info" class="px-4 py-2 text-sm text-primary-600">
                Page 1 of 1
              </span>
              <button id="next-page" class="btn-outline py-2 px-4 text-sm" disabled>
                Next
              </button>
            </nav>
          </div>

          <!-- Back to Dashboard -->
          <div class="mt-8">
            <a href="/dashboard" class="btn-outline">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
              </svg>
              Back to Dashboard
            </a>
          </div>
        </div>
      </div>
    </section>
  </div>
</Layout>

<script type="module">
  import { createClient } from '@supabase/supabase-js';

  const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
  const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
  const supabase = createClient(supabaseUrl, supabaseAnonKey);

  document.addEventListener('DOMContentLoaded', async () => {
    const authLoading = document.getElementById('auth-loading');
    const ordersContent = document.getElementById('orders-content');
    const ordersList = document.getElementById('orders-list');
    const orderCount = document.getElementById('order-count');
    const statusFilter = document.getElementById('status-filter');
    const dateFilter = document.getElementById('date-filter');
    const pagination = document.getElementById('pagination');
    const prevPageBtn = document.getElementById('prev-page');
    const nextPageBtn = document.getElementById('next-page');
    const pageInfo = document.getElementById('page-info');

    let currentPage = 1;
    const ordersPerPage = 10;
    let allOrders = [];
    let filteredOrders = [];

    // Check authentication
    const { data: { user }, error: authError } = await supabase.auth.getUser();

    if (authError || !user) {
      window.location.href = '/login';
      return;
    }

    // Show orders content
    authLoading.classList.add('hidden');
    ordersContent.classList.remove('hidden');

    // Load orders
    await loadOrders();

    // Filter handlers
    statusFilter.addEventListener('change', applyFilters);
    dateFilter.addEventListener('change', applyFilters);

    // Pagination handlers
    prevPageBtn.addEventListener('click', () => {
      if (currentPage > 1) {
        currentPage--;
        displayOrders();
      }
    });

    nextPageBtn.addEventListener('click', () => {
      const totalPages = Math.ceil(filteredOrders.length / ordersPerPage);
      if (currentPage < totalPages) {
        currentPage++;
        displayOrders();
      }
    });

    async function loadOrders() {
      try {
        const { data, error } = await supabase
          .from('stripe_user_orders')
          .select('*')
          .order('order_date', { ascending: false });

        if (error) {
          console.error('Error loading orders:', error);
          ordersList.innerHTML = `
            <div class="text-center py-16">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-error-400 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <p class="text-error-600">Unable to load orders</p>
            </div>
          `;
          return;
        }

        allOrders = data || [];
        filteredOrders = [...allOrders];
        displayOrders();

      } catch (error) {
        console.error('Error loading orders:', error);
        ordersList.innerHTML = `
          <div class="text-center py-16">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-error-400 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <p class="text-error-600">Error loading orders</p>
          </div>
        `;
      }
    }

    function applyFilters() {
      const statusValue = statusFilter.value;
      const dateValue = dateFilter.value;

      filteredOrders = allOrders.filter(order => {
        // Status filter
        if (statusValue && order.order_status !== statusValue) {
          return false;
        }

        // Date filter
        if (dateValue) {
          const orderDate = new Date(order.order_date);
          const cutoffDate = new Date();
          cutoffDate.setDate(cutoffDate.getDate() - parseInt(dateValue));
          
          if (orderDate < cutoffDate) {
            return false;
          }
        }

        return true;
      });

      currentPage = 1;
      displayOrders();
    }

    function displayOrders() {
      orderCount.textContent = filteredOrders.length;

      if (filteredOrders.length === 0) {
        ordersList.innerHTML = `
          <div class="text-center py-16">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-primary-400 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
            </svg>
            <p class="text-primary-600">No orders found</p>
            <p class="text-sm text-primary-500 mt-1">Try adjusting your filters or place your first order</p>
          </div>
        `;
        pagination.classList.add('hidden');
        return;
      }

      // Calculate pagination
      const totalPages = Math.ceil(filteredOrders.length / ordersPerPage);
      const startIndex = (currentPage - 1) * ordersPerPage;
      const endIndex = startIndex + ordersPerPage;
      const ordersToShow = filteredOrders.slice(startIndex, endIndex);

      // Display orders
      ordersList.innerHTML = `
        <div class="space-y-4">
          ${ordersToShow.map(order => `
            <div class="card p-6 hover:shadow-medium transition-shadow">
              <div class="flex flex-col md:flex-row md:items-center md:justify-between">
                <div class="flex-grow mb-4 md:mb-0">
                  <div class="flex items-center space-x-3 mb-2">
                    <a href="/order/${order.order_id}" class="text-xl font-semibold text-primary-900 hover:text-primary-600 transition-colors">
                      Order #${order.order_id}
                    </a>
                    <span class="text-xs px-3 py-1 rounded-full ${getStatusClass(order.order_status)}">
                      ${order.order_status.charAt(0).toUpperCase() + order.order_status.slice(1)}
                    </span>
                  </div>
                  <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-primary-600">
                    <div>
                      <span class="font-medium">Date:</span> ${new Date(order.order_date).toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'short',
                        day: 'numeric'
                      })}
                    </div>
                    <div>
                      <span class="font-medium">Payment:</span> ${order.payment_status.charAt(0).toUpperCase() + order.payment_status.slice(1)}
                    </div>
                    <div>
                      <span class="font-medium">Currency:</span> ${order.currency.toUpperCase()}
                    </div>
                  </div>
                </div>
                <div class="flex items-center space-x-4">
                  <div class="text-right">
                    <p class="text-2xl font-bold text-primary-900">$${(order.amount_total / 100).toFixed(2)}</p>
                    <p class="text-sm text-primary-600">Total</p>
                  </div>
                  <a href="/order/${order.order_id}" class="btn-primary py-2 px-4">
                    View Details
                  </a>
                </div>
              </div>
            </div>
          `).join('')}
        </div>
      `;

      // Update pagination
      if (totalPages > 1) {
        pagination.classList.remove('hidden');
        pageInfo.textContent = `Page ${currentPage} of ${totalPages}`;
        prevPageBtn.disabled = currentPage === 1;
        nextPageBtn.disabled = currentPage === totalPages;
      } else {
        pagination.classList.add('hidden');
      }
    }

    function getStatusClass(status) {
      switch (status.toLowerCase()) {
        case 'completed':
          return 'bg-success-100 text-success-700';
        case 'pending':
          return 'bg-warning-100 text-warning-700';
        case 'canceled':
        case 'cancelled':
          return 'bg-error-100 text-error-700';
        default:
          return 'bg-primary-100 text-primary-700';
      }
    }
  });
</script>