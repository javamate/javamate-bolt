---
import Layout from '../../layouts/Layout.astro';

export const prerender = false;

const { id } = Astro.params;

if (!id) {
  return Astro.redirect('/404');
}
---

<Layout title="Order Details" description="View your order details and items">
  <div id="auth-loading" class="min-h-screen bg-primary-50 flex items-center justify-center">
    <div class="text-center">
      <div class="coffee-loader mb-4"></div>
      <p class="text-primary-600">Loading order details...</p>
    </div>
  </div>

  <div id="order-content" class="hidden">
    <section class="bg-primary-900 text-white py-16 md:py-24">
      <div class="container-custom">
        <div class="max-w-3xl mx-auto text-center">
          <h1 class="mb-4 animate-fade-in">Order Details</h1>
          <p class="text-lg text-primary-100 animate-slide-up" style="animation-delay: 0.2s;">
            View your order information and items
          </p>
        </div>
      </div>
    </section>

    <section class="section bg-white">
      <div class="container-custom">
        <div class="max-w-4xl mx-auto">
          <!-- Breadcrumb -->
          <nav class="mb-8">
            <ol class="flex items-center space-x-2 text-sm text-primary-600">
              <li><a href="/" class="hover:text-primary-800">Home</a></li>
              <li><span class="mx-2">/</span></li>
              <li><a href="/dashboard" class="hover:text-primary-800">Dashboard</a></li>
              <li><span class="mx-2">/</span></li>
              <li class="text-primary-900">Order <span id="breadcrumb-order-id">#{id}</span></li>
            </ol>
          </nav>

          <!-- Order Header -->
          <div class="card p-6 mb-8">
            <div class="flex flex-col md:flex-row md:items-center md:justify-between mb-6">
              <div>
                <h2 class="text-2xl font-semibold mb-2">Order <span id="order-number">#{id}</span></h2>
                <p class="text-primary-600" id="order-date">Loading...</p>
              </div>
              <div class="mt-4 md:mt-0">
                <span id="order-status-badge" class="px-4 py-2 rounded-full text-sm font-medium">
                  Loading...
                </span>
              </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div>
                <h3 class="font-semibold text-primary-900 mb-2">Payment Status</h3>
                <p id="payment-status" class="text-primary-700">Loading...</p>
              </div>
              <div>
                <h3 class="font-semibold text-primary-900 mb-2">Total Amount</h3>
                <p id="total-amount" class="text-2xl font-bold text-primary-900">Loading...</p>
              </div>
              <div>
                <h3 class="font-semibold text-primary-900 mb-2">Currency</h3>
                <p id="currency" class="text-primary-700">Loading...</p>
              </div>
            </div>
          </div>

          <!-- Order Items -->
          <div class="card p-6 mb-8">
            <h3 class="text-xl font-semibold mb-6">Order Items</h3>
            <div id="order-items" class="space-y-4">
              <!-- Items will be populated by JavaScript -->
              <div class="text-center py-8">
                <div class="coffee-loader mb-4"></div>
                <p class="text-primary-600">Loading order items...</p>
              </div>
            </div>
          </div>

          <!-- Order Summary -->
          <div class="card p-6 mb-8">
            <h3 class="text-xl font-semibold mb-6">Order Summary</h3>
            <div class="space-y-3">
              <div class="flex justify-between">
                <span class="text-primary-700">Subtotal</span>
                <span id="subtotal-amount">Loading...</span>
              </div>
              <div class="flex justify-between">
                <span class="text-primary-700">Shipping</span>
                <span id="shipping-amount" class="text-success-600">FREE</span>
              </div>
              <div class="flex justify-between">
                <span class="text-primary-700">Tax</span>
                <span id="tax-amount">$0.00</span>
              </div>
              <hr class="border-primary-200">
              <div class="flex justify-between text-lg font-semibold">
                <span>Total</span>
                <span id="summary-total">Loading...</span>
              </div>
            </div>
          </div>

          <!-- Payment Information -->
          <div class="card p-6 mb-8">
            <h3 class="text-xl font-semibold mb-6">Payment Information</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h4 class="font-medium text-primary-900 mb-2">Payment Method</h4>
                <div class="flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-primary-600 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" />
                  </svg>
                  <span class="text-primary-700">Credit Card</span>
                </div>
              </div>
              <div>
                <h4 class="font-medium text-primary-900 mb-2">Transaction ID</h4>
                <p id="transaction-id" class="text-primary-700 font-mono text-sm">Loading...</p>
              </div>
            </div>
          </div>

          <!-- Actions -->
          <div class="flex flex-col sm:flex-row gap-4">
            <a href="/dashboard" class="btn-outline">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
              </svg>
              Back to Dashboard
            </a>
            <a href="/shop" class="btn-primary">
              Continue Shopping
            </a>
            <button id="print-order" class="btn-outline">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" />
              </svg>
              Print Order
            </button>
          </div>
        </div>
      </div>
    </section>
  </div>

  <!-- Error State -->
  <div id="error-content" class="hidden">
    <section class="min-h-screen bg-primary-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div class="max-w-2xl w-full">
        <div class="bg-white rounded-lg shadow-medium p-8 text-center">
          <!-- Error Icon -->
          <div class="w-20 h-20 bg-error-100 rounded-full flex items-center justify-center mx-auto mb-6">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 text-error-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>

          <h1 class="text-3xl font-bold text-primary-900 mb-4">Order Not Found</h1>
          <p class="text-lg text-primary-700 mb-8" id="error-message">
            We couldn't find the order you're looking for. It may not exist or you may not have permission to view it.
          </p>

          <div class="flex flex-col sm:flex-row gap-4 justify-center">
            <a href="/dashboard" class="btn-primary">
              Go to Dashboard
            </a>
            <a href="/contact" class="btn-outline">
              Contact Support
            </a>
          </div>
        </div>
      </div>
    </section>
  </div>
</Layout>

<script define:vars={{ orderId: id }}>
  import { createClient } from '@supabase/supabase-js';

  const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
  const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
  const supabase = createClient(supabaseUrl, supabaseAnonKey);

  document.addEventListener('DOMContentLoaded', async () => {
    const authLoading = document.getElementById('auth-loading');
    const orderContent = document.getElementById('order-content');
    const errorContent = document.getElementById('error-content');
    const errorMessage = document.getElementById('error-message');

    // Check authentication
    const { data: { user }, error: authError } = await supabase.auth.getUser();

    if (authError || !user) {
      window.location.href = '/login';
      return;
    }

    try {
      // Load order details
      await loadOrderDetails(orderId);
    } catch (error) {
      console.error('Error loading order:', error);
      showError('An error occurred while loading the order details.');
    }

    function showError(message = 'Order not found or access denied.') {
      authLoading.classList.add('hidden');
      orderContent.classList.add('hidden');
      errorMessage.textContent = message;
      errorContent.classList.remove('hidden');
    }

    function showOrder() {
      authLoading.classList.add('hidden');
      errorContent.classList.add('hidden');
      orderContent.classList.remove('hidden');
    }

    async function loadOrderDetails(orderIdParam) {
      try {
        // Fetch order from database
        const { data: order, error } = await supabase
          .from('stripe_user_orders')
          .select('*')
          .eq('order_id', orderIdParam)
          .maybeSingle();

        if (error) {
          console.error('Error fetching order:', error);
          showError('Failed to load order details.');
          return;
        }

        if (!order) {
          showError('Order not found or you do not have permission to view it.');
          return;
        }

        // Display order details
        displayOrderDetails(order);
        showOrder();

      } catch (error) {
        console.error('Error in loadOrderDetails:', error);
        showError('An unexpected error occurred.');
      }
    }

    function displayOrderDetails(order) {
      // Update order header
      document.getElementById('order-number').textContent = `#${order.order_id}`;
      document.getElementById('breadcrumb-order-id').textContent = `#${order.order_id}`;
      document.getElementById('order-date').textContent = new Date(order.order_date).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });

      // Update status badge
      const statusBadge = document.getElementById('order-status-badge');
      const statusClass = getStatusClass(order.order_status);
      statusBadge.textContent = order.order_status.charAt(0).toUpperCase() + order.order_status.slice(1);
      statusBadge.className = `px-4 py-2 rounded-full text-sm font-medium ${statusClass}`;

      // Update payment and amount info
      document.getElementById('payment-status').textContent = order.payment_status.charAt(0).toUpperCase() + order.payment_status.slice(1);
      document.getElementById('total-amount').textContent = `$${(order.amount_total / 100).toFixed(2)}`;
      document.getElementById('currency').textContent = order.currency.toUpperCase();
      document.getElementById('transaction-id').textContent = order.payment_intent_id;

      // Update order summary
      document.getElementById('subtotal-amount').textContent = `$${(order.amount_subtotal / 100).toFixed(2)}`;
      document.getElementById('summary-total').textContent = `$${(order.amount_total / 100).toFixed(2)}`;

      // Display order items (for now, we'll show a generic item since we don't have line items stored)
      displayOrderItems(order);
    }

    function displayOrderItems(order) {
      const orderItemsContainer = document.getElementById('order-items');
      
      // Since we don't have detailed line items in the current schema,
      // we'll display a summary item based on the order total
      const itemHtml = `
        <div class="border border-primary-200 rounded-lg p-6">
          <div class="flex items-start space-x-4">
            <div class="w-16 h-16 bg-primary-100 rounded-lg flex items-center justify-center flex-shrink-0">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-primary-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
              </svg>
            </div>
            <div class="flex-grow">
              <div class="flex justify-between items-start">
                <div>
                  <h4 class="text-lg font-semibold text-primary-900 mb-1">Coffee Purchase</h4>
                  <p class="text-primary-600 text-sm mb-2">Premium coffee selection</p>
                  <div class="flex items-center space-x-4 text-sm text-primary-600">
                    <span>Quantity: 1</span>
                    <span>•</span>
                    <span>Size: 12oz</span>
                    <span>•</span>
                    <span>Grind: Whole Bean</span>
                  </div>
                </div>
                <div class="text-right">
                  <p class="text-lg font-semibold text-primary-900">$${(order.amount_total / 100).toFixed(2)}</p>
                  <p class="text-sm text-primary-600">Unit Price</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      `;

      orderItemsContainer.innerHTML = itemHtml;
    }

    function getStatusClass(status) {
      switch (status.toLowerCase()) {
        case 'completed':
          return 'bg-success-100 text-success-800';
        case 'pending':
          return 'bg-warning-100 text-warning-800';
        case 'canceled':
        case 'cancelled':
          return 'bg-error-100 text-error-800';
        default:
          return 'bg-primary-100 text-primary-800';
      }
    }

    // Print functionality
    document.getElementById('print-order').addEventListener('click', () => {
      window.print();
    });
  });
</script>

<style>
  @media print {
    .btn-outline,
    .btn-primary,
    nav,
    header,
    footer {
      display: none !important;
    }
    
    .card {
      box-shadow: none !important;
      border: 1px solid #e5e7eb !important;
    }
    
    .section {
      padding: 1rem 0 !important;
    }
    
    .container-custom {
      padding: 0 1rem !important;
    }
  }
</style>