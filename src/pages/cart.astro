---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Shopping Cart" description="Review your coffee selections and proceed to checkout.">
  <section class="bg-primary-900 text-white py-16 md:py-24">
    <div class="container-custom">
      <div class="max-w-3xl mx-auto text-center">
        <h1 class="mb-4 animate-fade-in">Your Cart</h1>
        <p class="text-lg text-primary-100 animate-slide-up" style="animation-delay: 0.2s;">
          Review your selections and proceed to checkout when you're ready.
        </p>
      </div>
    </div>
  </section>

  <section class="section bg-white">
    <div class="container-custom">
      <div class="max-w-6xl mx-auto">
        <!-- Cart Content -->
        <div id="cart-content" class="grid grid-cols-1 lg:grid-cols-3 gap-12">
          <!-- Cart Items -->
          <div class="lg:col-span-2">
            <div class="flex items-center justify-between mb-8">
              <h2 class="text-2xl font-semibold">Cart Items</h2>
              <button id="clear-cart" class="text-primary-600 hover:text-primary-800 text-sm font-medium">
                Clear All Items
              </button>
            </div>
            
            <!-- Cart Items Container -->
            <div id="cart-items" class="space-y-6">
              <!-- Items will be populated by JavaScript -->
            </div>
            
            <!-- Empty Cart State -->
            <div id="empty-cart" class="hidden text-center py-16">
              <div class="w-24 h-24 bg-primary-100 rounded-full flex items-center justify-center mx-auto mb-6">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-primary-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                </svg>
              </div>
              <h3 class="text-2xl font-semibold mb-4">Your cart is empty</h3>
              <p class="text-primary-600 mb-8">Looks like you haven't added any coffee to your cart yet.</p>
              <a href="/shop" class="btn-primary">Start Shopping</a>
            </div>
          </div>
          
          <!-- Order Summary -->
          <div class="lg:col-span-1">
            <div class="sticky top-24">
              <div class="card p-6">
                <h3 class="text-xl font-semibold mb-6">Order Summary</h3>
                
                <div class="space-y-4 mb-6">
                  <div class="flex justify-between">
                    <span>Subtotal (<span id="item-count">0</span> items)</span>
                    <span id="subtotal">$0.00</span>
                  </div>
                  
                  <div class="flex justify-between">
                    <span>Shipping</span>
                    <span id="shipping-cost" class="text-success-600 font-medium">FREE</span>
                  </div>
                  
                  <div class="flex justify-between text-sm text-primary-600">
                    <span>Tax (estimated)</span>
                    <span id="tax-amount">$0.00</span>
                  </div>
                  
                  <hr class="border-primary-200">
                  
                  <div class="flex justify-between text-lg font-semibold">
                    <span>Total</span>
                    <span id="total-amount">$0.00</span>
                  </div>
                </div>
                
                <!-- Promo Code -->
                <div class="mb-6">
                  <div class="flex">
                    <input 
                      type="text" 
                      id="promo-code" 
                      placeholder="Promo code" 
                      class="form-input rounded-r-none flex-grow"
                    />
                    <button 
                      id="apply-promo" 
                      class="btn-outline rounded-l-none px-4 text-sm"
                    >
                      Apply
                    </button>
                  </div>
                  <div id="promo-message" class="mt-2 text-sm hidden"></div>
                </div>
                
                <!-- Checkout Button -->
                <button id="checkout-btn" class="btn-primary w-full py-4 text-lg mb-4 disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                  <span id="checkout-text">Proceed to Checkout</span>
                  <div id="checkout-loading" class="hidden flex items-center justify-center">
                    <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Processing...
                  </div>
                </button>
                
                <!-- Continue Shopping -->
                <a href="/shop" class="btn-outline w-full text-center py-3">
                  Continue Shopping
                </a>
                
                <!-- Security Badge -->
                <div class="mt-6 pt-6 border-t border-primary-200">
                  <div class="flex items-center justify-center space-x-2 text-sm text-primary-600">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-success-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                    </svg>
                    <span>Secure checkout with Stripe</span>
                  </div>
                </div>
              </div>
              
              <!-- Shipping Info -->
              <div class="card p-6 mt-6">
                <h4 class="font-semibold mb-4">Shipping Information</h4>
                <div class="space-y-3 text-sm">
                  <div class="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-success-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                    <span>Free shipping on orders over $25</span>
                  </div>
                  <div class="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-success-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                    <span>Roasted fresh and shipped within 24 hours</span>
                  </div>
                  <div class="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-success-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                    <span>Delivery in 2-5 business days</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
</Layout>

<script type="module">
  import { createClient } from '@supabase/supabase-js';

  const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
  const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
  const supabase = createClient(supabaseUrl, supabaseAnonKey);

  // Cart management system
  class CartManager {
    constructor() {
      this.cart = this.loadCart();
      this.init();
    }
    
    init() {
      this.renderCart();
      this.bindEvents();
      this.updateCartCount();
    }
    
    loadCart() {
      try {
        const saved = localStorage.getItem('javamate-cart');
        return saved ? JSON.parse(saved) : [];
      } catch (error) {
        console.error('Error loading cart:', error);
        return [];
      }
    }
    
    saveCart() {
      try {
        localStorage.setItem('javamate-cart', JSON.stringify(this.cart));
        this.updateCartCount();
      } catch (error) {
        console.error('Error saving cart:', error);
      }
    }
    
    updateCartCount() {
      const cartCount = document.getElementById('cart-count');
      if (cartCount) {
        const totalItems = this.cart.reduce((sum, item) => sum + item.quantity, 0);
        cartCount.textContent = totalItems.toString();
        localStorage.setItem('cartCount', totalItems.toString());
      }
    }
    
    addItem(productId, title, price, image, grind = 'whole-bean', size = '12oz', quantity = 1, variantId = null, stripePriceId = null) {
      const existingItem = this.cart.find(item => 
        item.productId === productId && item.grind === grind && item.size === size
      );
      
      if (existingItem) {
        existingItem.quantity += quantity;
      } else {
        this.cart.push({
          id: Date.now().toString(),
          productId,
          variantId,
          title,
          price: parseFloat(price),
          image,
          grind,
          size,
          quantity,
          stripePriceId
        });
      }
      
      this.saveCart();
      this.renderCart();
    }
    
    updateQuantity(itemId, newQuantity) {
      const item = this.cart.find(item => item.id === itemId);
      if (item) {
        if (newQuantity <= 0) {
          this.removeItem(itemId);
        } else {
          item.quantity = Math.max(1, Math.min(10, newQuantity));
          this.saveCart();
          this.renderCart();
        }
      }
    }
    
    removeItem(itemId) {
      this.cart = this.cart.filter(item => item.id !== itemId);
      this.saveCart();
      this.renderCart();
    }
    
    clearCart() {
      this.cart = [];
      this.saveCart();
      this.renderCart();
    }
    
    getSubtotal() {
      return this.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    }
    
    getTax() {
      return 0; // this.getSubtotal() * 0.08; // 8% tax rate
    }
    
    getShipping() {
      return this.getSubtotal() >= 25 ? 0 : 5.99;
    }
    
    getTotal() {
      return this.getSubtotal() + this.getTax() + this.getShipping();
    }
    
    renderCart() {
      const cartItems = document.getElementById('cart-items');
      const emptyCart = document.getElementById('empty-cart');
      const checkoutBtn = document.getElementById('checkout-btn');
      
      if (this.cart.length === 0) {
        cartItems.innerHTML = '';
        emptyCart.classList.remove('hidden');
        checkoutBtn.disabled = true;
      } else {
        emptyCart.classList.add('hidden');
        checkoutBtn.disabled = false;
        
        cartItems.innerHTML = this.cart.map(item => `
          <div class="card p-6" data-item-id="${item.id}">
            <div class="flex flex-col sm:flex-row gap-6">
              <div class="flex-shrink-0">
                <img 
                  src="${item.image}" 
                  alt="${item.title}" 
                  class="w-24 h-24 object-cover rounded-lg"
                />
              </div>
              
              <div class="flex-grow">
                <div class="flex flex-col sm:flex-row sm:items-start sm:justify-between">
                  <div class="mb-4 sm:mb-0">
                    <h3 class="text-lg font-semibold mb-2">${item.title}</h3>
                    <p class="text-sm text-primary-600 mb-1">
                      Size: ${item.size || '12oz'} | Grind: ${this.formatGrindType(item.grind)}
                    </p>
                    <p class="text-lg font-semibold text-primary-900">$${item.price?.toFixed(2)} each</p>
                  </div>
                  
                  <div class="flex items-center justify-between sm:flex-col sm:items-end gap-4">
                    <div class="flex items-center space-x-3">
                      <button 
                        class="quantity-btn w-8 h-8 rounded-full border border-primary-300 flex items-center justify-center hover:bg-primary-50"
                        data-action="decrease"
                        data-item-id="${item.id}"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" />
                        </svg>
                      </button>
                      
                      <input 
                        type="number" 
                        value="${item.quantity}" 
                        min="1" 
                        max="10"
                        class="quantity-input w-16 text-center form-input py-1"
                        data-item-id="${item.id}"
                      />
                      
                      <button 
                        class="quantity-btn w-8 h-8 rounded-full border border-primary-300 flex items-center justify-center hover:bg-primary-50"
                        data-action="increase"
                        data-item-id="${item.id}"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                        </svg>
                      </button>
                    </div>
                    
                    <div class="text-right">
                      <p class="text-lg font-semibold">$${(item.price * item.quantity).toFixed(2)}</p>
                      <button 
                        class="remove-item text-sm text-error-600 hover:text-error-800 mt-1"
                        data-item-id="${item.id}"
                      >
                        Remove
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        `).join('');
      }
      
      this.updateSummary();
    }
    
    updateSummary() {
      const itemCount = document.getElementById('item-count');
      const subtotal = document.getElementById('subtotal');
      const shippingCost = document.getElementById('shipping-cost');
      const taxAmount = document.getElementById('tax-amount');
      const totalAmount = document.getElementById('total-amount');
      
      const totalItems = this.cart.reduce((sum, item) => sum + item.quantity, 0);
      const subtotalAmount = this.getSubtotal();
      const shipping = this.getShipping();
      const tax = this.getTax();
      const total = this.getTotal();
      
      if (itemCount) itemCount.textContent = totalItems.toString();
      if (subtotal) subtotal.textContent = `$${subtotalAmount.toFixed(2)}`;
      if (shippingCost) {
        shippingCost.textContent = shipping === 0 ? 'FREE' : `$${shipping.toFixed(2)}`;
        shippingCost.className = shipping === 0 ? 'text-success-600 font-medium' : '';
      }
      if (taxAmount) taxAmount.textContent = `$${tax.toFixed(2)}`;
      if (totalAmount) totalAmount.textContent = `$${total.toFixed(2)}`;
    }
    
    formatGrindType(grind) {
      const grindTypes = {
        'whole-bean': 'Whole Bean',
        'coarse': 'Coarse (French Press)',
        'medium-coarse': 'Medium-Coarse (Pour Over)',
        'medium': 'Medium (Drip Coffee)',
        'medium-fine': 'Medium-Fine (V60)',
        'fine': 'Fine (Espresso)'
      };
      return grindTypes[grind] || grind;
    }
    
    bindEvents() {
      // Quantity buttons
      document.addEventListener('click', (e) => {
        if (e.target.closest('.quantity-btn')) {
          const btn = e.target.closest('.quantity-btn');
          const action = btn.dataset.action;
          const itemId = btn.dataset.itemId;
          const item = this.cart.find(item => item.id === itemId);
          
          if (item) {
            if (action === 'increase') {
              this.updateQuantity(itemId, item.quantity + 1);
            } else if (action === 'decrease') {
              this.updateQuantity(itemId, item.quantity - 1);
            }
          }
        }
        
        // Remove item
        if (e.target.closest('.remove-item')) {
          const btn = e.target.closest('.remove-item');
          const itemId = btn.dataset.itemId;
          
          if (confirm('Are you sure you want to remove this item from your cart?')) {
            this.removeItem(itemId);
          }
        }
      });
      
      // Quantity input changes
      document.addEventListener('change', (e) => {
        if (e.target.classList.contains('quantity-input')) {
          const itemId = e.target.dataset.itemId;
          const newQuantity = parseInt(e.target.value);
          this.updateQuantity(itemId, newQuantity);
        }
      });
      
      // Clear cart
      const clearCartBtn = document.getElementById('clear-cart');
      if (clearCartBtn) {
        clearCartBtn.addEventListener('click', () => {
          if (confirm('Are you sure you want to clear all items from your cart?')) {
            this.clearCart();
          }
        });
      }
      
      // Promo code
      const applyPromoBtn = document.getElementById('apply-promo');
      const promoInput = document.getElementById('promo-code');
      const promoMessage = document.getElementById('promo-message');
      
      if (applyPromoBtn && promoInput && promoMessage) {
        applyPromoBtn.addEventListener('click', () => {
          const code = promoInput.value.trim().toUpperCase();
          
          // Demo promo codes
          const promoCodes = {
            'WELCOME10': { discount: 0.1, message: '10% discount applied!' },
            'COFFEE20': { discount: 0.2, message: '20% discount applied!' },
            'FREESHIP': { discount: 0, freeShipping: true, message: 'Free shipping applied!' }
          };
          
          if (promoCodes[code]) {
            const promo = promoCodes[code];
            promoMessage.textContent = promo.message;
            promoMessage.className = 'mt-2 text-sm text-success-600';
            promoMessage.classList.remove('hidden');
          } else {
            promoMessage.textContent = 'Invalid promo code';
            promoMessage.className = 'mt-2 text-sm text-error-600';
            promoMessage.classList.remove('hidden');
          }
          
          setTimeout(() => {
            promoMessage.classList.add('hidden');
          }, 3000);
        });
      }
      
      // Checkout button
      const checkoutBtn = document.getElementById('checkout-btn');
      if (checkoutBtn) {
        checkoutBtn.addEventListener('click', async () => {
          await this.handleCheckout();
        });
      }
    }

    async handleCheckout() {
      const checkoutBtn = document.getElementById('checkout-btn');
      const checkoutText = document.getElementById('checkout-text');
      const checkoutLoading = document.getElementById('checkout-loading');

      // Check if user is authenticated
      const { data: { user }, error: authError } = await supabase.auth.getUser();

      if (authError || !user) {
        // Store cart and redirect to login
        localStorage.setItem('checkout-redirect', 'true');
        window.location.href = '/login';
        return;
      }

      // Show loading state
      checkoutBtn.disabled = true;
      checkoutText.classList.add('hidden');
      checkoutLoading.classList.remove('hidden');

      try {
        const { data: { session }, error: sessionError } = await supabase.auth.getSession();
        
        if (sessionError || !session) {
          throw new Error('Authentication required');
        }

        // Process each cart item individually
        const lineItems = this.cart.map(item => ({
          variant_data: {
            variant_id: item.variantId || `${item.productId}-${item.size}-${item.grind}`,
            product_name: item.title,
            size: item.size || '12oz',
            grind: item.grind || 'whole-bean',
            price: item.price,
            quantity: item.quantity
          },
          price_id: item.stripePriceId || null,
          quantity: item.quantity
        }));

        // Store cart data temporarily for potential restoration
        const cartBackup = JSON.stringify(this.cart);
        sessionStorage.setItem('checkout-cart-backup', cartBackup);

        // Send all line items to be processed individually
        const response = await fetch(`${supabaseUrl}/functions/v1/stripe-checkout`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${session.access_token}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            line_items: lineItems,
            mode: 'payment',
            success_url: `${window.location.origin}/success?session_id={CHECKOUT_SESSION_ID}`,
            cancel_url: `${window.location.origin}/cart`,
          }),
        });

        const data = await response.json();

        if (!response.ok) {
          throw new Error(data.error || 'Failed to create checkout session');
        }

        if (data.url) {
          // DO NOT clear cart here - it will be cleared on successful payment
          // Store session ID for tracking
          sessionStorage.setItem('pending-checkout-session', data.sessionId);
          window.location.href = data.url;
        } else {
          throw new Error('No checkout URL received');
        }
      } catch (error) {
        console.error('Checkout error:', error);
        
        // Remove backup since checkout failed
        sessionStorage.removeItem('checkout-cart-backup');
        
        // Show error message
        const errorDiv = document.createElement('div');
        errorDiv.className = 'fixed top-24 right-8 bg-error-500 text-white py-3 px-6 rounded-lg shadow-lg z-50 animate-fade-in';
        errorDiv.innerHTML = `
          <div class="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            ${error.message || 'Checkout failed. Please try again.'}
          </div>
        `;
        document.body.appendChild(errorDiv);
        
        setTimeout(() => {
          errorDiv.remove();
        }, 5000);
      } finally {
        // Reset button state
        checkoutBtn.disabled = false;
        checkoutText.classList.remove('hidden');
        checkoutLoading.classList.add('hidden');
      }
    }
  }
  
  // Initialize cart when page loads
  document.addEventListener('DOMContentLoaded', () => {
    window.cartManager = new CartManager();
    
    // Check if user came from login and should proceed to checkout
    if (localStorage.getItem('checkout-redirect') === 'true') {
      localStorage.removeItem('checkout-redirect');
      // Auto-trigger checkout if cart has items
      if (window.cartManager.cart.length > 0) {
        setTimeout(() => {
          window.cartManager.handleCheckout();
        }, 1000);
      }
    }

    // Check if user returned from a cancelled checkout
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get('checkout') === 'cancelled') {
      // Restore cart from backup if available
      const cartBackup = sessionStorage.getItem('checkout-cart-backup');
      if (cartBackup) {
        try {
          const restoredCart = JSON.parse(cartBackup);
          localStorage.setItem('javamate-cart', cartBackup);
          window.cartManager.cart = restoredCart;
          window.cartManager.renderCart();
          window.cartManager.updateCartCount();
          
          // Show restoration message
          const messageDiv = document.createElement('div');
          messageDiv.className = 'fixed top-24 right-8 bg-primary-500 text-white py-3 px-6 rounded-lg shadow-lg z-50 animate-fade-in';
          messageDiv.innerHTML = `
            <div class="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              Your cart has been restored. You can continue shopping or try checkout again.
            </div>
          `;
          document.body.appendChild(messageDiv);
          
          setTimeout(() => {
            messageDiv.remove();
          }, 5000);
        } catch (error) {
          console.error('Error restoring cart:', error);
        }
        
        // Clean up backup
        sessionStorage.removeItem('checkout-cart-backup');
      }
      
      // Clean up URL
      window.history.replaceState({}, document.title, window.location.pathname);
    }
  });
  
  // Global function to add items to cart (called from other pages)
  window.addToCart = function(productId, title, price, image, grind = 'whole-bean', size = '12oz', quantity = 1, variantId = null, stripePriceId = null) {
    if (window.cartManager) {
      window.cartManager.addItem(productId, title, price, image, grind, size, quantity, variantId, stripePriceId);
    }
  };
</script>

<style>
  .quantity-input::-webkit-outer-spin-button,
  .quantity-input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
  
  .quantity-input[type=number] {
    -moz-appearance: textfield;
  }
</style>