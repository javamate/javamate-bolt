---
import Layout from '../../layouts/Layout.astro';
import { getContentfulEntry, getContentfulEntries } from '../../lib/contentful';

export const prerender = true;

export async function getStaticPaths() {
  try {
    const products = await getContentfulEntries('product');
    console.log('Got products', products);
    
    return products.map((product) => ({
      params: { slug: product.fields.slug },
      props: { product },
    }));
  } catch (error) {
    console.error('Error generating static paths:', error);
    return [];
  }
}

const { product } = Astro.props;

if (!product) {
  console.log('product', product)
  return Astro.redirect('/404');
}

// Get related products (same origin or roast level)
const relatedProducts = await getContentfulEntries('product', {
  limit: 4,
  'sys.id[ne]': product.sys.id,
});

const productImages = product.fields.images || [product.fields.featuredImage].filter(Boolean);
---

<Layout 
  title={product.fields.title}
  description={product.fields.shortDescription}
  ogImage={product.fields.featuredImage?.fields.file.url}
>
  <section class="section bg-white">
    <div class="container-custom">
      <!-- Breadcrumb -->
      <nav class="mb-8 reveal">
        <ol class="flex items-center space-x-2 text-sm text-primary-600">
          <li><a href="/" class="hover:text-primary-800">Home</a></li>
          <li><span class="mx-2">/</span></li>
          <li><a href="/shop" class="hover:text-primary-800">Shop</a></li>
          <li><span class="mx-2">/</span></li>
          <li class="text-primary-900">{product.fields.title}</li>
        </ol>
      </nav>

      <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 mb-16">
        <!-- Product Images -->
        <div class="reveal">
          <div class="sticky top-24">
            <div class="mb-4">
              <img 
                id="main-image"
                src={product.fields.featuredImage?.fields.file.url || "https://images.pexels.com/photos/1695052/pexels-photo-1695052.jpeg"} 
                alt={product.fields.title}
                class="w-full aspect-square object-cover rounded-lg shadow-medium"
              />
            </div>
            
            {productImages.length > 1 && (
              <div class="flex space-x-2 overflow-x-auto">
                {productImages.map((image, index) => (
                  <button 
                    class="thumbnail-btn flex-shrink-0 w-20 h-20 rounded-md overflow-hidden border-2 border-transparent hover:border-primary-300 transition-colors"
                    data-image={image.fields.file.url}
                  >
                    <img 
                      src={image.fields.file.url} 
                      alt={`${product.fields.title} view ${index + 1}`}
                      class="w-full h-full object-cover"
                    />
                  </button>
                ))}
              </div>
            )}
          </div>
        </div>

        <!-- Product Details -->
        <div class="reveal">
          <div class="mb-4">
            {product.fields.isNew && (
              <span class="inline-block bg-accent-500 text-white text-xs font-bold uppercase tracking-wider px-3 py-1 rounded-full mb-2">
                New Arrival
              </span>
            )}
            <div class="flex items-center space-x-4 text-sm text-primary-600 mb-2">
              <span>{product.fields.origin}</span>
              <span>â€¢</span>
              <span>{product.fields.roastLevel} Roast</span>
            </div>
          </div>

          <h1 class="mb-4">{product.fields.title}</h1>
          
          <div class="mb-6">
            <span class="text-3xl font-bold text-primary-900">${product.fields.price.toFixed(2)}</span>
            <span class="text-primary-600 ml-2">per 12oz bag</span>
          </div>

          <p class="text-lg text-primary-800 mb-8">{product.fields.shortDescription}</p>

          <!-- Add to Cart Form -->
          <form class="mb-8 space-y-4">
            <div>
              <label for="grind-type" class="form-label">Grind Type</label>
              <select id="grind-type" name="grind" class="form-input">
                <option value="whole-bean">Whole Bean</option>
                <option value="coarse">Coarse (French Press)</option>
                <option value="medium-coarse">Medium-Coarse (Pour Over)</option>
                <option value="medium">Medium (Drip Coffee)</option>
                <option value="medium-fine">Medium-Fine (V60)</option>
                <option value="fine">Fine (Espresso)</option>
              </select>
            </div>

            <div>
              <label for="quantity" class="form-label">Quantity</label>
              <div class="flex items-center space-x-3">
                <button type="button" id="decrease-qty" class="w-10 h-10 rounded-full border border-primary-300 flex items-center justify-center hover:bg-primary-50">
                  <span class="sr-only">Decrease quantity</span>
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" />
                  </svg>
                </button>
                <input 
                  type="number" 
                  id="quantity" 
                  name="quantity" 
                  value="1" 
                  min="1" 
                  max="10"
                  class="form-input w-20 text-center"
                />
                <button type="button" id="increase-qty" class="w-10 h-10 rounded-full border border-primary-300 flex items-center justify-center hover:bg-primary-50">
                  <span class="sr-only">Increase quantity</span>
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                  </svg>
                </button>
              </div>
            </div>

            <button type="submit" class="btn-primary w-full py-4 text-lg add-to-cart" data-product-id={product.sys.id}>
              Add to Cart - $<span id="total-price">{product.fields.price.toFixed(2)}</span>
            </button>
          </form>

          <!-- Product Features -->
          <div class="grid grid-cols-2 gap-4 mb-8">
            <div class="flex items-center space-x-3 p-4 bg-primary-50 rounded-lg">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-primary-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
              </svg>
              <span class="text-sm font-medium">Fresh Roasted</span>
            </div>
            <div class="flex items-center space-x-3 p-4 bg-primary-50 rounded-lg">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-primary-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m-9 9a9 9 0 019-9" />
              </svg>
              <span class="text-sm font-medium">Ethically Sourced</span>
            </div>
            <div class="flex items-center space-x-3 p-4 bg-primary-50 rounded-lg">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-primary-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
              </svg>
              <span class="text-sm font-medium">Free Shipping</span>
            </div>
            <div class="flex items-center space-x-3 p-4 bg-primary-50 rounded-lg">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-primary-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <span class="text-sm font-medium">Quality Guarantee</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Product Description -->
      <div class="mb-16 reveal">
        <div class="max-w-4xl mx-auto">
          <h2 class="mb-6">About This Coffee</h2>
          <div class="prose prose-lg max-w-none">
            <p class="text-lg leading-relaxed">{product.fields.description}</p>
          </div>
          
          <!-- Coffee Details -->
          <div class="grid grid-cols-1 md:grid-cols-3 gap-8 mt-12">
            <div class="text-center">
              <div class="w-16 h-16 bg-primary-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-primary-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <h3 class="text-lg font-semibold mb-2">Origin</h3>
              <p class="text-primary-700">{product.fields.origin}</p>
            </div>
            
            <div class="text-center">
              <div class="w-16 h-16 bg-primary-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-primary-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 18.657A8 8 0 016.343 7.343S7 9 9 10c0-2 .5-5 2.986-7C14 5 16.09 5.777 17.656 7.343A7.975 7.975 0 0120 13a7.975 7.975 0 01-2.343 5.657z" />
                </svg>
              </div>
              <h3 class="text-lg font-semibold mb-2">Roast Level</h3>
              <p class="text-primary-700">{product.fields.roastLevel}</p>
            </div>
            
            <div class="text-center">
              <div class="w-16 h-16 bg-primary-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-primary-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
                </svg>
              </div>
              <h3 class="text-lg font-semibold mb-2">Processing</h3>
              <p class="text-primary-700">Washed</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Related Products -->
      {relatedProducts.length > 0 && (
        <div class="reveal">
          <h2 class="text-center mb-12">You Might Also Like</h2>
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8">
            {relatedProducts.slice(0, 4).map((relatedProduct) => (
              <div class="card group">
                <div class="relative overflow-hidden">
                  <img 
                    src={relatedProduct.fields.featuredImage?.fields.file.url || "https://images.pexels.com/photos/1695052/pexels-photo-1695052.jpeg"} 
                    alt={relatedProduct.fields.title} 
                    class="w-full aspect-square object-cover transform group-hover:scale-105 transition-transform duration-500"
                    loading="lazy"
                  />
                </div>
                <div class="p-6">
                  <h3 class="text-xl mb-2">{relatedProduct.fields.title}</h3>
                  <p class="text-primary-700 mb-4 line-clamp-2">{relatedProduct.fields.shortDescription}</p>
                  <div class="flex items-center justify-between">
                    <span class="text-lg font-semibold">${relatedProduct.fields.price.toFixed(2)}</span>
                    <a href={`/product/${relatedProduct.fields.slug}`} class="btn-primary py-2 px-4">View</a>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  </section>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Image gallery functionality
    const mainImage = document.getElementById('main-image');
    const thumbnailBtns = document.querySelectorAll('.thumbnail-btn');
    
    thumbnailBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const newImageSrc = btn.dataset.image;
        if (mainImage && newImageSrc) {
          mainImage.src = newImageSrc;
          
          // Update active thumbnail
          thumbnailBtns.forEach(thumb => thumb.classList.remove('border-primary-600'));
          btn.classList.add('border-primary-600');
        }
      });
    });
    
    // Quantity controls
    const quantityInput = document.getElementById('quantity');
    const decreaseBtn = document.getElementById('decrease-qty');
    const increaseBtn = document.getElementById('increase-qty');
    const totalPriceSpan = document.getElementById('total-price');
    
    if (quantityInput && totalPriceSpan) {
      const basePrice = parseFloat(totalPriceSpan.textContent);
      
      function updateTotalPrice() {
        const quantity = parseInt(quantityInput.value);
        const total = (basePrice * quantity).toFixed(2);
        totalPriceSpan.textContent = total;
      }
      
      if (decreaseBtn) {
        decreaseBtn.addEventListener('click', () => {
          const currentValue = parseInt(quantityInput.value);
          if (currentValue > 1) {
            quantityInput.value = currentValue - 1;
            updateTotalPrice();
          }
        });
      }
      
      if (increaseBtn) {
        increaseBtn.addEventListener('click', () => {
          const currentValue = parseInt(quantityInput.value);
          if (currentValue < 10) {
            quantityInput.value = currentValue + 1;
            updateTotalPrice();
          }
        });
      }
      
      quantityInput.addEventListener('change', updateTotalPrice);
    }
    
    // Add to cart form submission
    const addToCartForm = document.querySelector('form');
    if (addToCartForm) {
      addToCartForm.addEventListener('submit', (e) => {
        e.preventDefault();
        
        const formData = new FormData(addToCartForm);
        const quantity = parseInt(formData.get('quantity') || '1');
        const grind = formData.get('grind');
        
        // Update cart count
        const cartCount = document.getElementById('cart-count');
        if (cartCount) {
          const currentCount = parseInt(cartCount.textContent);
          const newCount = currentCount + quantity;
          cartCount.textContent = newCount.toString();
          localStorage.setItem('cartCount', newCount.toString());
        }
        
        // Show success message
        const message = document.createElement('div');
        message.innerHTML = `
          <div class="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
            Added ${quantity} item${quantity > 1 ? 's' : ''} to cart!
          </div>
        `;
        message.className = 'fixed top-24 right-8 bg-success-500 text-white py-3 px-6 rounded-lg shadow-lg z-50 animate-fade-in';
        document.body.appendChild(message);
        
        setTimeout(() => {
          message.remove();
        }, 3000);
      });
    }
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .prose {
    color: inherit;
  }
  
  .prose p {
    margin-bottom: 1rem;
  }
</style>