---
import Layout from '../layouts/Layout.astro';
import { getCrystallizeProducts } from '../lib/crystallize';

// Fetch all products from Crystallize
const products = await getCrystallizeProducts({ limit: 50 });

// Get unique origins and roast levels for filtering
const origins = [...new Set(products.map(p => p.fields.origin).filter(Boolean))];
const roastLevels = [...new Set(products.map(p => p.fields.roastLevel).filter(Boolean))];
---

<Layout title="Shop Coffee" description="Browse our selection of freshly roasted specialty coffee beans from around the world.">
  <section class="bg-primary-900 text-white py-16 md:py-24">
    <div class="container-custom">
      <div class="max-w-3xl mx-auto text-center">
        <h1 class="mb-4 animate-fade-in">Shop Our Coffee</h1>
        <p class="text-lg text-primary-100 animate-slide-up" style="animation-delay: 0.2s;">
          Discover our carefully curated selection of single-origin and blend coffees, roasted to perfection.
        </p>
      </div>
    </div>
  </section>

  <section class="section bg-white">
    <div class="container-custom">
      <!-- Filters -->
      <div class="mb-12 reveal">
        <div class="flex flex-wrap gap-4 justify-center">
          <button class="filter-btn active" data-filter="all">All Coffees</button>
          <button class="filter-btn" data-filter="featured">Featured</button>
          <button class="filter-btn" data-filter="new">New Arrivals</button>
          {origins.map(origin => (
            <button class="filter-btn" data-filter={origin.toLowerCase().replace(/\s+/g, '-')}>{origin}</button>
          ))}
        </div>
        
        <div class="mt-6 flex flex-wrap gap-4 justify-center">
          <select id="roast-filter" class="form-input max-w-xs">
            <option value="">All Roast Levels</option>
            {roastLevels.map(level => (
              <option value={level.toLowerCase().replace(/\s+/g, '-')}>{level}</option>
            ))}
          </select>
          
          <select id="sort-filter" class="form-input max-w-xs">
            <option value="featured">Sort by Featured</option>
            <option value="price-low">Price: Low to High</option>
            <option value="price-high">Price: High to Low</option>
            <option value="name">Name: A to Z</option>
          </select>
        </div>
      </div>

      <!-- Products Grid -->
      <div id="products-grid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8 reveal">
        {products.map((product) => (
          <div class="product-card card group" 
               data-featured={product.fields.featured ? 'true' : 'false'}
               data-new={product.fields.isNew ? 'true' : 'false'}
               data-origin={product.fields.origin?.toLowerCase().replace(/\s+/g, '-') || ''}
               data-roast={product.fields.roastLevel?.toLowerCase().replace(/\s+/g, '-') || ''}
               data-price={product.fields.price}
               data-name={product.fields.title.toLowerCase()}>
            <div class="relative overflow-hidden">
              <img 
                src={product.fields.featuredImage?.fields.file.url || "https://images.pexels.com/photos/1695052/pexels-photo-1695052.jpeg"} 
                alt={product.fields.title} 
                class="w-full aspect-square object-cover transform group-hover:scale-105 transition-transform duration-500"
                loading="lazy"
              />
              {product.fields.isNew && (
                <div class="absolute top-4 left-4 bg-accent-500 text-white text-xs font-bold uppercase tracking-wider px-3 py-1 rounded-full">
                  New
                </div>
              )}
              {product.fields.featured && (
                <div class="absolute top-4 right-4 bg-secondary-500 text-primary-900 text-xs font-bold uppercase tracking-wider px-3 py-1 rounded-full">
                  Featured
                </div>
              )}
            </div>
            <div class="p-6">
              <div class="flex items-center justify-between mb-2">
                <span class="text-sm text-primary-600 font-medium">{product.fields.origin}</span>
                <span class="text-sm text-primary-600">{product.fields.roastLevel}</span>
              </div>
              <h3 class="text-xl mb-2 group-hover:text-primary-600 transition-colors">{product.fields.title}</h3>
              <p class="text-primary-700 mb-4 line-clamp-2">{product.fields.shortDescription}</p>
              <div class="flex items-center justify-between">
                <span class="text-2xl font-bold text-primary-900">
                  From ${Math.min(...product.fields.variants.map(v => v.price)).toFixed(2)}
                </span>
                <div class="flex gap-2">
                  <a href={`/product/${product.fields.slug}`} class="btn-outline py-2 px-4 text-sm">View</a>
                  <button class="btn-primary py-2 px-4 text-sm add-to-cart" data-product-id={product.sys.id}>
                    Add to Cart
                  </button>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      <!-- Empty State -->
      <div id="no-products" class="hidden text-center py-16">
        <div class="w-24 h-24 bg-primary-100 rounded-full flex items-center justify-center mx-auto mb-6">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-primary-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </div>
        <h3 class="text-2xl font-semibold mb-2">No products found</h3>
        <p class="text-primary-600 mb-6">Try adjusting your filters to see more results.</p>
        <button id="clear-filters" class="btn-primary">Clear All Filters</button>
      </div>
    </div>
  </section>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const filterButtons = document.querySelectorAll('.filter-btn');
    const roastFilter = document.getElementById('roast-filter');
    const sortFilter = document.getElementById('sort-filter');
    const productsGrid = document.getElementById('products-grid');
    const noProductsMessage = document.getElementById('no-products');
    const clearFiltersBtn = document.getElementById('clear-filters');
    
    let currentFilters = {
      category: 'all',
      roast: '',
      sort: 'featured'
    };
    
    // Filter button handlers
    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        filterButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        currentFilters.category = button.dataset.filter;
        applyFilters();
      });
    });
    
    // Roast level filter
    roastFilter.addEventListener('change', (e) => {
      currentFilters.roast = e.target.value;
      applyFilters();
    });
    
    // Sort filter
    sortFilter.addEventListener('change', (e) => {
      currentFilters.sort = e.target.value;
      applyFilters();
    });
    
    // Clear filters
    clearFiltersBtn.addEventListener('click', () => {
      currentFilters = { category: 'all', roast: '', sort: 'featured' };
      filterButtons.forEach(btn => btn.classList.remove('active'));
      filterButtons[0].classList.add('active');
      roastFilter.value = '';
      sortFilter.value = 'featured';
      applyFilters();
    });
    
    function applyFilters() {
      const products = Array.from(document.querySelectorAll('.product-card'));
      let visibleProducts = [];
      
      products.forEach(product => {
        let show = true;
        
        // Category filter
        if (currentFilters.category !== 'all') {
          if (currentFilters.category === 'featured' && product.dataset.featured !== 'true') {
            show = false;
          } else if (currentFilters.category === 'new' && product.dataset.new !== 'true') {
            show = false;
          } else if (currentFilters.category !== 'featured' && currentFilters.category !== 'new' && 
                     product.dataset.origin !== currentFilters.category) {
            show = false;
          }
        }
        
        // Roast level filter
        if (currentFilters.roast && product.dataset.roast !== currentFilters.roast) {
          show = false;
        }
        
        if (show) {
          visibleProducts.push(product);
          product.style.display = 'block';
        } else {
          product.style.display = 'none';
        }
      });
      
      // Sort products
      if (currentFilters.sort && visibleProducts.length > 0) {
        visibleProducts.sort((a, b) => {
          switch (currentFilters.sort) {
            case 'price-low':
              return parseFloat(a.dataset.price) - parseFloat(b.dataset.price);
            case 'price-high':
              return parseFloat(b.dataset.price) - parseFloat(a.dataset.price);
            case 'name':
              return a.dataset.name.localeCompare(b.dataset.name);
            case 'featured':
            default:
              // Featured first, then by name
              if (a.dataset.featured === 'true' && b.dataset.featured !== 'true') return -1;
              if (b.dataset.featured === 'true' && a.dataset.featured !== 'true') return 1;
              return a.dataset.name.localeCompare(b.dataset.name);
          }
        });
        
        // Reorder DOM elements
        visibleProducts.forEach(product => {
          productsGrid.appendChild(product);
        });
      }
      
      // Show/hide empty state
      if (visibleProducts.length === 0) {
        noProductsMessage.classList.remove('hidden');
        productsGrid.classList.add('hidden');
      } else {
        noProductsMessage.classList.add('hidden');
        productsGrid.classList.remove('hidden');
      }
    }
  });
</script>

<style>
  .filter-btn {
    @apply px-4 py-2 rounded-full border border-primary-300 text-primary-700 hover:bg-primary-50 transition-colors;
  }
  
  .filter-btn.active {
    @apply bg-primary-600 text-white border-primary-600;
  }
  
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>